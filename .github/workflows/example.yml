on:
  push:
    branches:
      - main
  pull_request:
    branches: '*'

jobs:
  example_job:
    runs-on: ubuntu-latest
    name: Create and then delete a database using BentoDB
    steps:
      - uses: actions/checkout@v3
      - name: Create BentoDB database
        id: create
        uses: DigitalSVN/bentodb-create-database@main
        with:
          api-token: ${{ secrets.BENTODB_API_TOKEN }}
          database-name: "${{ github.repository }}/${{ github.head_ref }}"

      - name: Output the database name
        run: echo "Database name - ${{ steps.create.outputs.database_name }}, ID - ${{ steps.create.outputs.database_id }}"

      - name: Connect to MySQL database
        run: |
          mysql \
          --user=${{ steps.create.outputs.database_username }} \
          --password=${{ steps.create.outputs.database_password }} \
          --ssl-mode=required \
          ${{ steps.create.outputs.database_name }} -e "CREATE TABLE `books` (`id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT, `title` varchar(255), `author` varchar(255), PRIMARY KEY (`id`));DESCRIBE `books`;INSERT INTO books (`title`, `author`) VALUES ('The Da Vinci Code', 'Dan Brown'), ('Harry Potter and the Chamber of Secrets', 'J. K. Rowling');SELECT * FROM `books` ORDER BY title ASC;"
        env:
          MYSQL_HOST: ${{ steps.create.outputs.database_host }}
          MYSQL_TCP_PORT: ${{ steps.create.outputs.database_port }}

        
      - name: Delete BentoDB database
        id: delete
        uses: DigitalSVN/bentodb-delete-database@main
        with:
          api-token: ${{ secrets.BENTODB_API_TOKEN }}
          database-id: ${{ steps.create.outputs.database_id }}
          
      - name: Confirm deleted database name
        run: echo "Database name - ${{ steps.delete.outputs.database_name }}, ID - ${{ steps.delete.outputs.database_id }}"
